class Solution {
    public int maxProfit(int[] prices) {
        // create an integer called low and set it to the first index in the array
        int low = prices[0];

        // create an integer called profit and set it to zero
        int profit = 0;

        // iterate through the array starting at the second index
        for( int i = 1; i < prices.length; i++ ) {
            // if the value of the current index is less than the value of low
            // replace low with the value of the current index
            if( prices[i] < low ) low = prices[i];

            // else if the value of the current index is greather than the value of low
            // subtract the value of the current index with the value of low and
            // compare to the value of the current profit
            // update the current profit with the higher value
            else if( prices[i] > low ) profit = Math.max( prices[i] - low, profit );
        }

        // return profit
        return profit;

    }
}

====================================================================================================
Simple version of Kadane's algorithm
class Solution {
    public int maxProfit(int[] prices) {
        // create an integer called low and set it to the first index in the array
        int low = prices[0];

        // create an integer called profit and set it to zero
        int profit = 0;

        // iterate through the array starting at the second index
        for( int i = 1; i < prices.length; i++ ) {                  
            low = Math.min( low, prices[i] );            
            profit = Math.max( prices[i] - low, profit );
        }

        return profit;

    }
}